// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

model User {
  id String @id @default(uuid())
  first_name String? 
  last_name String?
  username String? @unique
  email String @unique
  password String?
  role Role @default(USER)
  created_at DateTime @default(now())
  emailVerified DateTime?

  posts posts[]
  posts_comments post_comments[] @relation("UserComments")

  
  accounts Account[]
}

model Account {
  id String @id @default(cuid())
  userId String
  type  String
  provider  String
  providerAccountId  String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at Int?
  token_type  String?
  scope String?
  id_token  String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider,providerAccountId])
}
model posts {
  post_id String @id @default(uuid())
  post_owner String
  type PostType
  detail String?
  image_url String?
  status String?
  lat Float?
  lng Float?
  created_at DateTime @default(now())

  owner User @relation(fields: [post_owner], references: [id])
  comments post_comments[]
}

model post_comments {
  comment_id String @id @default(uuid())
  post_id String
  comment_owner String
  comment String
  image_url String?
  created_at DateTime @default(now())

  owner User @relation("UserComments", fields: [comment_owner], references: [id])
  post posts @relation(fields: [post_id], references: [post_id])
}